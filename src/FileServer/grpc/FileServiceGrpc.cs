// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/file_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Services {
  public static class FileService
  {
    static readonly string __ServiceName = "Services.FileService";

    static readonly Marshaller<global::Services.FileMessage> __Marshaller_FileMessage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.FileMessage.Parser.ParseFrom);
    static readonly Marshaller<global::Services.FileBytes> __Marshaller_FileBytes = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.FileBytes.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Services.ExistMessage> __Marshaller_ExistMessage = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.ExistMessage.Parser.ParseFrom);

    static readonly Method<global::Services.FileMessage, global::Services.FileBytes> __Method_Get = new Method<global::Services.FileMessage, global::Services.FileBytes>(
        MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_FileMessage,
        __Marshaller_FileBytes);

    static readonly Method<global::Services.FileBytes, global::Services.FileMessage> __Method_Create = new Method<global::Services.FileBytes, global::Services.FileMessage>(
        MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_FileBytes,
        __Marshaller_FileMessage);

    static readonly Method<global::Services.FileMessage, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Delete = new Method<global::Services.FileMessage, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_FileMessage,
        __Marshaller_Empty);

    static readonly Method<global::Services.FileMessage, global::Services.ExistMessage> __Method_Exists = new Method<global::Services.FileMessage, global::Services.ExistMessage>(
        MethodType.Unary,
        __ServiceName,
        "Exists",
        __Marshaller_FileMessage,
        __Marshaller_ExistMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Services.FileServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FileService</summary>
    public abstract class FileServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Services.FileBytes> Get(global::Services.FileMessage request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.FileMessage> Create(global::Services.FileBytes request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Delete(global::Services.FileMessage request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.ExistMessage> Exists(global::Services.FileMessage request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FileService</summary>
    public class FileServiceClient : ClientBase<FileServiceClient>
    {
      /// <summary>Creates a new client for FileService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FileServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FileService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FileServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FileServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FileServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Services.FileBytes Get(global::Services.FileMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Get(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.FileBytes Get(global::Services.FileMessage request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Services.FileBytes> GetAsync(global::Services.FileMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Services.FileBytes> GetAsync(global::Services.FileMessage request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      public virtual global::Services.FileMessage Create(global::Services.FileBytes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Create(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.FileMessage Create(global::Services.FileBytes request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Services.FileMessage> CreateAsync(global::Services.FileBytes request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Services.FileMessage> CreateAsync(global::Services.FileBytes request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Delete(global::Services.FileMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Delete(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Delete(global::Services.FileMessage request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAsync(global::Services.FileMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAsync(global::Services.FileMessage request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual global::Services.ExistMessage Exists(global::Services.FileMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Exists(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.ExistMessage Exists(global::Services.FileMessage request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Exists, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Services.ExistMessage> ExistsAsync(global::Services.FileMessage request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExistsAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Services.ExistMessage> ExistsAsync(global::Services.FileMessage request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Exists, null, options, request);
      }
      protected override FileServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FileServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(FileServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_Exists, serviceImpl.Exists).Build();
    }

  }
}
#endregion
